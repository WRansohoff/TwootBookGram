name: Build and Deploy LLM Runtime Container

on:
  workflow_dispatch

# Required permissions for AWS OIDC link.
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: "us-east-2"

jobs:
  build_deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Fetch AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{secrets.AWS_ROLE}}
          role-session-name: GitHub_to_AWS_OIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id:   ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd runtime_container/ && \
          pip install -r requirements.txt && \
          pip install -r requirements_torch_cpu.txt

      - name: Download Model
        run: |
          cd runtime_container/opt-350m && \
          git lfs install && \
          git clone https://huggingface.co/facebook/opt-350m && \
          mv opt-350m/* .

      - name: Quantize Model
        run: |
          cd runtime_container/ && \
          optimum-cli export openvino --model opt-350m/ \
                                      --cache_dir opt-350m-ov/model_cache/ \
                                      --task text-generation \
                                      --int8 \
                                      opt-350m-ov/ && \
          python3 -c "from optimum.intel import OVModelForCausalLM; OVModelForCausalLM.from_pretrained('opt-350m-ov', use_cache=False)"

      - name: Deploy Container and Infrastructure
        run: |
          cd terraform && \
          terraform apply \
            -var forbidden_words='${{secrets.LLM_FORBIDDEN_WORDS}}' \
            -var ecr_address='${{secrets.ECR_REPOSITORY}}' \
            -var ecr_pw='${{steps.ecr-login.outputs.docker_password}}' \
            -auto-approve && \
          echo "app_url=`terraform output -raw s3_static_site`" >> "$GITHUB_OUTPUT"

      - name: Export Static React Site
        run: |
          cd frontend && \
          sed -i "s^%%LAMBDA_FUNCTION_URL%%^`terraform -chdir=../terraform output -raw lambda_endpoint`^g" pages/index.tsx && \
          npm run build && \
          aws s3 cp --recursive ../frontend/out/* `terraform -chdir=../terraform output -raw s3_url`
